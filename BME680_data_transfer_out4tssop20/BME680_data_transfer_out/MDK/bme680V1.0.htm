<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bme680V1.0.2]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bme680V1.0.2</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Aug 12 13:37:15 2022
<BR><P>
<H3>Maximum Stack Usage =       3336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; bsec_iot_loop &rArr; bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">IRQ00_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">IRQ00_Handler</a><BR>
 <LI><a href="#[e]">IRQ01_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">IRQ01_Handler</a><BR>
 <LI><a href="#[11]">IRQ04_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">IRQ04_Handler</a><BR>
 <LI><a href="#[12]">IRQ05_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">IRQ05_Handler</a><BR>
 <LI><a href="#[13]">IRQ06_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">IRQ06_Handler</a><BR>
 <LI><a href="#[14]">IRQ07_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">IRQ07_Handler</a><BR>
 <LI><a href="#[15]">IRQ08_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">IRQ08_Handler</a><BR>
 <LI><a href="#[16]">IRQ09_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">IRQ09_Handler</a><BR>
 <LI><a href="#[17]">IRQ10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">IRQ10_Handler</a><BR>
 <LI><a href="#[18]">IRQ11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">IRQ11_Handler</a><BR>
 <LI><a href="#[19]">IRQ12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">IRQ12_Handler</a><BR>
 <LI><a href="#[1a]">IRQ13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">IRQ13_Handler</a><BR>
 <LI><a href="#[1c]">IRQ15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">IRQ15_Handler</a><BR>
 <LI><a href="#[1d]">IRQ16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IRQ16_Handler</a><BR>
 <LI><a href="#[1e]">IRQ17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">IRQ17_Handler</a><BR>
 <LI><a href="#[1f]">IRQ18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">IRQ18_Handler</a><BR>
 <LI><a href="#[20]">IRQ19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">IRQ19_Handler</a><BR>
 <LI><a href="#[21]">IRQ20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">IRQ20_Handler</a><BR>
 <LI><a href="#[22]">IRQ21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ21_Handler</a><BR>
 <LI><a href="#[23]">IRQ22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ22_Handler</a><BR>
 <LI><a href="#[24]">IRQ23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ23_Handler</a><BR>
 <LI><a href="#[25]">IRQ24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ24_Handler</a><BR>
 <LI><a href="#[26]">IRQ25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">IRQ25_Handler</a><BR>
 <LI><a href="#[27]">IRQ26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">IRQ26_Handler</a><BR>
 <LI><a href="#[28]">IRQ27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">IRQ27_Handler</a><BR>
 <LI><a href="#[29]">IRQ28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">IRQ28_Handler</a><BR>
 <LI><a href="#[2a]">IRQ29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">IRQ29_Handler</a><BR>
 <LI><a href="#[2b]">IRQ30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">IRQ30_Handler</a><BR>
 <LI><a href="#[2c]">IRQ31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">IRQ31_Handler</a><BR>
 <LI><a href="#[3e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">MemManage_Handler</a><BR>
 <LI><a href="#[3f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">BusFault_Handler</a><BR>
 <LI><a href="#[40]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">UsageFault_Handler</a><BR>
 <LI><a href="#[41]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">DebugMon_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">HardFault_Handler</a> from main.o(.emb_text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[d]">IRQ00_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[e]">IRQ01_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[f]">IRQ02_Handler</a> from sim_i2c_slave.o(i.intp_1_interrupt) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[10]">IRQ03_Handler</a> from sim_i2c_slave.o(i.intp_2_interrupt) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[11]">IRQ04_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[12]">IRQ05_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[13]">IRQ06_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[14]">IRQ07_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[15]">IRQ08_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[16]">IRQ09_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[17]">IRQ10_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[18]">IRQ11_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[19]">IRQ12_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[1a]">IRQ13_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[1b]">IRQ14_Handler</a> from sci_user.o(i.IRQ14_Handler) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[1c]">IRQ15_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[1d]">IRQ16_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[1e]">IRQ17_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[1f]">IRQ18_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[20]">IRQ19_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[21]">IRQ20_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[22]">IRQ21_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[23]">IRQ22_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[24]">IRQ23_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[25]">IRQ24_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[26]">IRQ25_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[27]">IRQ26_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[28]">IRQ27_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[29]">IRQ28_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[2a]">IRQ29_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[2b]">IRQ30_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[2c]">IRQ31_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from wdt_user.o(i.wdt_interrupt) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[3b]">Reset_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_cms32l051.o(.text) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_cms32l051.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_cms32l051.o(i.SystemInit) referenced from startup_cms32l051.o(.text)
 <LI><a href="#[3c]">__main</a> from __main.o(!!!main) referenced from startup_cms32l051.o(.text)
 <LI><a href="#[3a]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[31]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[35]">bus_read</a> from main.o(i.bus_read) referenced from main.o(i.main)
 <LI><a href="#[36]">bus_write</a> from main.o(i.bus_write) referenced from main.o(i.main)
 <LI><a href="#[32]">config_load</a> from main.o(i.config_load) referenced from main.o(i.main)
 <LI><a href="#[30]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[39]">get_timestamp_us</a> from main.o(i.get_timestamp_us) referenced from main.o(i.main)
 <LI><a href="#[2d]">hard_fault_handler_c</a> from main.o(i.hard_fault_handler_c) referenced from main.o(.emb_text)
 <LI><a href="#[38]">output_ready</a> from main.o(i.output_ready) referenced from main.o(i.main)
 <LI><a href="#[34]">sleep</a> from common_porting.o(i.sleep) referenced from main.o(i.main)
 <LI><a href="#[33]">state_load</a> from main.o(i.state_load) referenced from main.o(i.main)
 <LI><a href="#[37]">state_save</a> from main.o(i.state_save) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[44]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[45]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[46]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_ll &rArr; _printf_d &rArr; _printf_x &rArr; _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[47]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_d &rArr; _printf_x &rArr; _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[49]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_x &rArr; _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[4a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[4c]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[4e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[57]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[50]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[52]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[5c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[43]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[54]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[56]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[58]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; bsec_iot_loop &rArr; bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_q_Entity_parseAndDeserialize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))

<P><STRONG><a name="[3e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[3f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[40]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ00_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ01_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ04_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ05_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ06_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ07_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ08_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ09_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_cms32l051.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[1c7]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_ldivmod</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[1c8]"></a>_ll_sdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, llsdiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>

<P><STRONG><a name="[4b]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[4f]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[4d]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_write
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_k_Entity_parseAndDeserialize
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_j_Entity_parseAndDeserialize
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_i_Entity_parseAndDeserialize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_frameSerializedData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[1ca]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[6d]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_profile_dur
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isChannelReady
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_recalculateDownsampling
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_heater_res
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1cf]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[1d2]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[71]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[74]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[75]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[77]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[76]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[1d3]"></a>_ll_sfrom_d</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, dfixl.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[1d4]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[1d5]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[1d6]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_l2d_normalise</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_l2d</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[1d7]"></a>_ll_sto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_ul2d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>

<P><STRONG><a name="[1d8]"></a>_ll_uto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[1d9]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
</UL>

<P><STRONG><a name="[1da]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_absHum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[7f]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[7e]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1db]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[1dc]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_IaqEstimator
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[1dd]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1de]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_l2f_normalise</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_l2f</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2f &rArr; __aeabi_l2f_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[1df]"></a>_ll_sto_f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltl.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_ul2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f_normalise
</UL>

<P><STRONG><a name="[1e0]"></a>_ll_uto_f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltl.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[67]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[1e1]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[88]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[66]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e2]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[62]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[65]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[94]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[18a]"></a>__ARM_fcmp4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fcmp4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
</UL>

<P><STRONG><a name="[97]"></a>_fcmp4</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fcmp4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[98]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmp4
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[193]"></a>_ffix_r</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ffix_r
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[188]"></a>_frnd</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[195]"></a>_fsqrt</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[51]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1e3]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[91]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8c]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9d]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[8e]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[95]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[96]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[99]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[1e5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5a]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[198]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[a0]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[1e7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>CLK_GetHocoFreq</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, system_cms32l051.o(i.CLK_GetHocoFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[18e]"></a>I2C_intp1</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sim_i2c_slave.o(i.I2C_intp1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_1_interrupt
</UL>

<P><STRONG><a name="[a6]"></a>I2C_intp2</STRONG> (Thumb, 640 bytes, Stack size 4 bytes, sim_i2c_slave.o(i.I2C_intp2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_2_interrupt
</UL>

<P><STRONG><a name="[191]"></a>IIC11_Init</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, sci.o(i.IIC11_Init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>IIC11_MasterReceive</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sci.o(i.IIC11_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC11_MasterReceive &rArr; IIC11_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_read
</UL>

<P><STRONG><a name="[aa]"></a>IIC11_MasterSend</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sci.o(i.IIC11_MasterSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC11_MasterSend &rArr; IIC11_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_read
</UL>

<P><STRONG><a name="[a8]"></a>IIC11_StartCondition</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sci.o(i.IIC11_StartCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC11_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_MasterSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_MasterReceive
</UL>

<P><STRONG><a name="[18c]"></a>IIC11_Stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sci.o(i.IIC11_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic11_callback_master_sendend
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic11_callback_master_receiveend
</UL>

<P><STRONG><a name="[ae]"></a>IIC11_StopCondition</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sci.o(i.IIC11_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC11_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[ab]"></a>IIC11_read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, common_porting.o(i.IIC11_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC11_read &rArr; IIC11_MasterSend &rArr; IIC11_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_MasterSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_MasterReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_read
</UL>

<P><STRONG><a name="[ac]"></a>IIC11_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, common_porting.o(i.IIC11_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC11_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_MasterSend
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_write
</UL>

<P><STRONG><a name="[b2]"></a>INTP_Init</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, intp.o(i.INTP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INTP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSwSlaveI2C
</UL>

<P><STRONG><a name="[b3]"></a>INTP_Start</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, intp.o(i.INTP_Start))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSwSlaveI2C
</UL>

<P><STRONG><a name="[1b]"></a>IRQ14_Handler</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, sci_user.o(i.IRQ14_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ14_Handler &rArr; iic11_callback_master_sendend
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic11_callback_master_sendend
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic11_callback_master_receiveend
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic11_callback_master_error
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_StopCondition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>InitSwSlaveI2C</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sim_i2c_slave.o(i.InitSwSlaveI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitSwSlaveI2C &rArr; INTP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTP_Start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, system_cms32l051.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, system_cms32l051.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>UART0_BaudRate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sci.o(i.UART0_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[b7]"></a>UART0_Init</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, sci.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>UART0_Send</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sci.o(i.UART0_Send))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b6]"></a>UART_BaudRateCal</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, sci.o(i.UART_BaudRateCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>

<P><STRONG><a name="[197]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDT_Restart), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_interrupt
</UL>

<P><STRONG><a name="[182]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bme680.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
</UL>

<P><STRONG><a name="[9c]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp_us
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[a5]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, Bsec.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_configure
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_setState
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_intp2
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
</UL>

<P><STRONG><a name="[90]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[189]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[b9]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __mathlib_flt_divzero &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[bb]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[bd]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[bf]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[c0]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_overflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[c1]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[c2]"></a>__mathlib_rredf2</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[69]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5e]"></a>_sys_exit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cd]"></a>bme680_get_profile_dur</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bme680.o(i.bme680_get_profile_dur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bme680_get_profile_dur
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[d1]"></a>bme680_get_regs</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, bme680.o(i.bme680_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bme680_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[c9]"></a>bme680_get_sensor_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bme680.o(i.bme680_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = bme680_get_sensor_data &rArr; read_field_data &rArr; calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
</UL>

<P><STRONG><a name="[ce]"></a>bme680_get_sensor_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bme680.o(i.bme680_get_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bme680_get_sensor_mode &rArr; bme680_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[d5]"></a>bme680_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bme680.o(i.bme680_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bme680_init &rArr; bme680_soft_reset &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[d8]"></a>bme680_set_regs</STRONG> (Thumb, 166 bytes, Stack size 88 bytes, bme680.o(i.bme680_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
</UL>

<P><STRONG><a name="[cc]"></a>bme680_set_sensor_mode</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bme680.o(i.bme680_set_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bme680_set_sensor_mode &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[cb]"></a>bme680_set_sensor_settings</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, bme680.o(i.bme680_set_sensor_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bme680_set_sensor_settings &rArr; bme680_set_sensor_mode &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boundary_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[d6]"></a>bme680_soft_reset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bme680.o(i.bme680_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bme680_soft_reset &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mem_page
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
</UL>

<P><STRONG><a name="[161]"></a>bsec_Bsec_append</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, Bsec.o(i.bsec_Bsec_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_Bsec_append
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>

<P><STRONG><a name="[dd]"></a>bsec_Bsec_applyUpdateSubscription</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, Bsec.o(i.bsec_Bsec_applyUpdateSubscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateOutputSamplIntvl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_resetSamplIntvls
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_recalculateDownsampling
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[e2]"></a>bsec_Bsec_checkIfSensorRequired</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_checkIfSensorRequired))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsec_Bsec_checkIfSensorRequired &rArr; rem_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[e4]"></a>bsec_Bsec_checkSamplIntvlCompatibilty</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, Bsec.o(i.bsec_Bsec_checkSamplIntvlCompatibilty))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_Bsec_checkSamplIntvlCompatibilty &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[e6]"></a>bsec_Bsec_frameSerializedData</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, Bsec.o(i.bsec_Bsec_frameSerializedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_Bsec_frameSerializedData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_crcCcitt2
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>

<P><STRONG><a name="[162]"></a>bsec_Bsec_getHyperState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Bsec.o(i.bsec_Bsec_getHyperState))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>

<P><STRONG><a name="[e8]"></a>bsec_Bsec_getModHeatingDuration</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_getModHeatingDuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = bsec_Bsec_getModHeatingDuration &rArr; powf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[16b]"></a>bsec_Bsec_parse</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, Bsec.o(i.bsec_Bsec_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_Bsec_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[ee]"></a>bsec_Bsec_requestOutput</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, Bsec.o(i.bsec_Bsec_requestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_Bsec_requestOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[ec]"></a>bsec_Bsec_setHyperConfiguration</STRONG> (Thumb, 586 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_setHyperConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[170]"></a>bsec_Bsec_setHyperState</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, Bsec.o(i.bsec_Bsec_setHyperState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_Bsec_setHyperState
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[ef]"></a>bsec_Bsec_validateSerialization</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, Bsec.o(i.bsec_Bsec_validateSerialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_Bsec_validateSerialization &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_crcCcitt2
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[f0]"></a>bsec_ChannelHub_ChannelHub</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ChannelHub.o(i.bsec_ChannelHub_ChannelHub))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsec_ChannelHub_ChannelHub &rArr; bsec_b_ChannelHub_ChannelHub &rArr; bsec_IaqEstimator_IaqEstimator &rArr; bsec_b_IaqEstimator_IaqEstimator &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[f2]"></a>bsec_ChannelHub_configureChannel</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_ChannelHub_configureChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsec_ChannelHub_configureChannel &rArr; bsec_SensorHeatCompensator_configure &rArr; bsec_q_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_configure
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_configure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_configure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_configure
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[f9]"></a>bsec_ChannelHub_do</STRONG> (Thumb, 800 bytes, Stack size 144 bytes, ChannelHub.o(i.bsec_ChannelHub_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isChannelReady
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[103]"></a>bsec_ChannelHub_getChannelState</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ChannelHub.o(i.bsec_ChannelHub_getChannelState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsec_ChannelHub_getChannelState &rArr; bsec_SensorStatusTracker_getState &rArr; bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_getState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_getState
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Entity_serializeAndAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>

<P><STRONG><a name="[15f]"></a>bsec_ChannelHub_getOutput</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_getOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_getOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[15e]"></a>bsec_ChannelHub_isOutputValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ChannelHub.o(i.bsec_ChannelHub_isOutputValid))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[e0]"></a>bsec_ChannelHub_recalculateDownsampling</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_ChannelHub_recalculateDownsampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_ChannelHub_recalculateDownsampling
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[de]"></a>bsec_ChannelHub_resetSamplIntvls</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_resetSamplIntvls))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_resetSamplIntvls
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[10b]"></a>bsec_ChannelHub_setChannelState</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_ChannelHub_setChannelState))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsec_ChannelHub_setChannelState &rArr; bsec_GasHumidityPreProcessor_setState &rArr; bsec_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_setState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_setState
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_setState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_setState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_setState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
</UL>

<P><STRONG><a name="[15d]"></a>bsec_ChannelHub_setInput</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_setInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_setInput
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[e1]"></a>bsec_ChannelHub_updateChannelInterfaceDependency</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ChannelHub.o(i.bsec_ChannelHub_updateChannelInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[df]"></a>bsec_ChannelHub_updateOutputSamplIntvl</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_updateOutputSamplIntvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_updateOutputSamplIntvl
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[139]"></a>bsec_Channel_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, Channel.o(i.bsec_Channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
</UL>

<P><STRONG><a name="[13a]"></a>bsec_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 28 bytes, Entity.o(i.bsec_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_setState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_configure
</UL>

<P><STRONG><a name="[105]"></a>bsec_Entity_serializeAndAdd</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, Entity.o(i.bsec_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[138]"></a>bsec_ExpSmoothingBsec_ExpSmoothingBsec</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ExpSmoothingBsec.o(i.bsec_ExpSmoothingBsec_ExpSmoothingBsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_ExpSmoothingBsec_ExpSmoothingBsec
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
</UL>

<P><STRONG><a name="[117]"></a>bsec_ExpSmoothing_setCoeffFromBandwidth</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, ExpSmoothing.o(i.bsec_ExpSmoothing_setCoeffFromBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sqrt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
</UL>

<P><STRONG><a name="[11a]"></a>bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker &rArr; bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[f4]"></a>bsec_GasHumidityBaselineTracker_configure</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsec_GasHumidityBaselineTracker_configure &rArr; bsec_l_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_n_Entity_parseAndDeserialize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_m_Entity_parseAndDeserialize
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_l_Entity_parseAndDeserialize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_d_Entity_parseAndDeserialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[fe]"></a>bsec_GasHumidityBaselineTracker_doStep</STRONG> (Thumb, 346 bytes, Stack size 80 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[106]"></a>bsec_GasHumidityBaselineTracker_getState</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_GasHumidityBaselineTracker_getState &rArr; bsec_d_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_d_Entity_serializeAndAdd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Entity_serializeAndAdd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_serializeAndAdd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_Entity_serializeAndAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[15a]"></a>bsec_GasHumidityBaselineTracker_setState</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_GasHumidityBaselineTracker_setState
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker
</UL>

<P><STRONG><a name="[113]"></a>bsec_GasHumidityBaselineTracker_updateInterfaceDependency</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsec_GasHumidityBaselineTracker_updateInterfaceDependency &rArr; bsec_log10 &rArr; log10f &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_log10
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_sqrt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[137]"></a>bsec_GasHumidityPreProcessor_GasHumidityPreProcessor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_GasHumidityPreProcessor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_GasHumidityPreProcessor_GasHumidityPreProcessor &rArr; bsec_ExpSmoothingBsec_ExpSmoothingBsec
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothingBsec_ExpSmoothingBsec
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[f3]"></a>bsec_GasHumidityPreProcessor_configure</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_GasHumidityPreProcessor_configure &rArr; bsec_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[fd]"></a>bsec_GasHumidityPreProcessor_doStep</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = bsec_GasHumidityPreProcessor_doStep &rArr; bsec_log10 &rArr; log10f &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_log10
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[10c]"></a>bsec_GasHumidityPreProcessor_setState</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsec_GasHumidityPreProcessor_setState &rArr; bsec_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[112]"></a>bsec_GasHumidityPreProcessor_updateInterfaceDependency</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[13b]"></a>bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector &rArr; bsec_b_Channel_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothingBsec_ExpSmoothingBsec
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[f8]"></a>bsec_HumidityTemperatureCorrector_configure</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_HumidityTemperatureCorrector_configure &rArr; bsec_p_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_p_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[102]"></a>bsec_HumidityTemperatureCorrector_doStep</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsec_HumidityTemperatureCorrector_doStep &rArr; bsec_convertHumidity &rArr; bsec_log &rArr; logf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_polyval
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[10a]"></a>bsec_HumidityTemperatureCorrector_getState</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_HumidityTemperatureCorrector_getState &rArr; bsec_e_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[111]"></a>bsec_HumidityTemperatureCorrector_setState</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_HumidityTemperatureCorrector_setState &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[116]"></a>bsec_HumidityTemperatureCorrector_updateInterfaceDependency</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsec_HumidityTemperatureCorrector_updateInterfaceDependency &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_sqrt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[142]"></a>bsec_IaqEstimator_IaqEstimator</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, IaqEstimator.o(i.bsec_IaqEstimator_IaqEstimator))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsec_IaqEstimator_IaqEstimator &rArr; bsec_b_IaqEstimator_IaqEstimator &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_IaqEstimator
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[100]"></a>bsec_IaqEstimator_doStep</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, IaqEstimator.o(i.bsec_IaqEstimator_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bsec_IaqEstimator_doStep &rArr; powf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[108]"></a>bsec_IaqEstimator_getState</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, IaqEstimator.o(i.bsec_IaqEstimator_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_IaqEstimator_getState &rArr; bsec_e_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[10f]"></a>bsec_IaqEstimator_setState</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, IaqEstimator.o(i.bsec_IaqEstimator_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_IaqEstimator_setState &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[115]"></a>bsec_IaqEstimator_updateInterfaceDependency</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, IaqEstimator.o(i.bsec_IaqEstimator_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bsec_IaqEstimator_updateInterfaceDependency &rArr; bsec_IaqEstimator_getGains &rArr; bsec_log10 &rArr; log10f &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[145]"></a>bsec_SensorHeatCompensator_SensorHeatCompensator</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_SensorHeatCompensator))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_SensorHeatCompensator_SensorHeatCompensator &rArr; bsec_b_SensorHeatCompensator_SensorHeatCompensator
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorHeatCompensator_SensorHeatCompensator
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[f7]"></a>bsec_SensorHeatCompensator_configure</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsec_SensorHeatCompensator_configure &rArr; bsec_q_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_q_Entity_parseAndDeserialize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[101]"></a>bsec_SensorHeatCompensator_doStep</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsec_SensorHeatCompensator_doStep &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_isequal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[109]"></a>bsec_SensorHeatCompensator_getState</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsec_SensorHeatCompensator_getState &rArr; bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_serializeAndAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[110]"></a>bsec_SensorHeatCompensator_setState</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_SensorHeatCompensator_setState &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[159]"></a>bsec_SensorStatusTracker_SensorStatusTracker</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_SensorStatusTracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_SensorStatusTracker_SensorStatusTracker
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[fb]"></a>bsec_SensorStatusTracker_doStep</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsec_SensorStatusTracker_doStep &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_resetRunInState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[107]"></a>bsec_SensorStatusTracker_getState</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsec_SensorStatusTracker_getState &rArr; bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_h_Entity_serializeAndAdd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_serializeAndAdd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[10e]"></a>bsec_SensorStatusTracker_setState</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_SensorStatusTracker_setState &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_h_Entity_parseAndDeserialize
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_parseAndDeserialize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[114]"></a>bsec_SensorStatusTracker_updateInterfaceDependency</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_SensorStatusTracker_updateInterfaceDependency &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_resetRunInState
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[11c]"></a>bsec_Serialization_checkSerializationHeader</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, Serialization.o(i.bsec_Serialization_checkSerializationHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_configure
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_configure
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_setState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_setState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_setState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_setState
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_setState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_configure
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[104]"></a>bsec_Serialization_prepareSerializationHeader</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, Serialization.o(i.bsec_Serialization_prepareSerializationHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_getState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_getState
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[135]"></a>bsec_absHum</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, absHum.o(i.bsec_absHum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
</UL>

<P><STRONG><a name="[151]"></a>bsec_applyScalarFunctionInPlace</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, applyScalarFunctionInPlace.o(i.bsec_applyScalarFunctionInPlace))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsec_applyScalarFunctionInPlace &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sqrt
</UL>

<P><STRONG><a name="[153]"></a>bsec_b_Bsec_setHyperConfiguration</STRONG> (Thumb, 318 bytes, Stack size 272 bytes, Bsec.o(i.bsec_b_Bsec_setHyperConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = bsec_b_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_k_Entity_parseAndDeserialize
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_j_Entity_parseAndDeserialize
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_i_Entity_parseAndDeserialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_parseAndDeserialize
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[16d]"></a>bsec_b_Bsec_setHyperState</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, Bsec.o(i.bsec_b_Bsec_setHyperState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_b_Bsec_setHyperState
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
</UL>

<P><STRONG><a name="[13d]"></a>bsec_b_Channel_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, Channel.o(i.bsec_b_Channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_b_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
</UL>

<P><STRONG><a name="[122]"></a>bsec_b_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, Entity.o(i.bsec_b_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_b_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[12c]"></a>bsec_b_Entity_serializeAndAdd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, Entity.o(i.bsec_b_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_b_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[13c]"></a>bsec_b_ExpSmoothingBsec_ExpSmoothingBsec</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ExpSmoothingBsec.o(i.bsec_b_ExpSmoothingBsec_ExpSmoothingBsec))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
</UL>

<P><STRONG><a name="[10d]"></a>bsec_b_GasHumidityBaselineTracker_setState</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, GasHumidityBaselineTracker.o(i.bsec_b_GasHumidityBaselineTracker_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_b_GasHumidityBaselineTracker_setState &rArr; bsec_b_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_d_Entity_parseAndDeserialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Entity_parseAndDeserialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_parseAndDeserialize
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[f6]"></a>bsec_b_IaqEstimator_configure</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, IaqEstimator.o(i.bsec_b_IaqEstimator_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_b_IaqEstimator_configure &rArr; bsec_p_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_p_Entity_parseAndDeserialize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_parseAndDeserialize
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[f5]"></a>bsec_b_SensorStatusTracker_configure</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, SensorStatusTracker.o(i.bsec_b_SensorStatusTracker_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_b_SensorStatusTracker_configure &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_o_Entity_parseAndDeserialize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[133]"></a>bsec_b_sqrt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sqrt.o(i.bsec_b_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsec_b_sqrt &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[158]"></a>bsec_c_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, Entity.o(i.bsec_c_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_c_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_configure
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[12d]"></a>bsec_c_Entity_serializeAndAdd</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, Entity.o(i.bsec_c_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_c_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[15c]"></a>bsec_codegen_do_steps</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, bsec_codegen_do_steps.o(i.bsec_codegen_do_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setInput
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isOutputValid
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getOutput
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_do_steps
</UL>

<P><STRONG><a name="[160]"></a>bsec_codegen_get_state</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, bsec_codegen_get_state.o(i.bsec_codegen_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bsec_codegen_get_state &rArr; bsec_ChannelHub_getChannelState &rArr; bsec_SensorStatusTracker_getState &rArr; bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getHyperState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_frameSerializedData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_append
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_state
</UL>

<P><STRONG><a name="[163]"></a>bsec_codegen_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsec_codegen_init.o(i.bsec_codegen_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bsec_codegen_init &rArr; bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_init
</UL>

<P><STRONG><a name="[165]"></a>bsec_codegen_sensor_control</STRONG> (Thumb, 854 bytes, Stack size 80 bytes, bsec_codegen_sensor_control.o(i.bsec_codegen_sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = bsec_codegen_sensor_control &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkIfSensorRequired
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setInput
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sensor_control
</UL>

<P><STRONG><a name="[16a]"></a>bsec_codegen_set_configuration</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, bsec_codegen_set_configuration.o(i.bsec_codegen_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = bsec_codegen_set_configuration &rArr; bsec_b_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_configuration
</UL>

<P><STRONG><a name="[16c]"></a>bsec_codegen_set_state</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, bsec_codegen_set_state.o(i.bsec_codegen_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bsec_codegen_set_state &rArr; bsec_ChannelHub_setChannelState &rArr; bsec_GasHumidityPreProcessor_setState &rArr; bsec_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperState
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_state
</UL>

<P><STRONG><a name="[16e]"></a>bsec_codegen_update_subscription</STRONG> (Thumb, 752 bytes, Stack size 96 bytes, bsec_codegen_update_subscription.o(i.bsec_codegen_update_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_update_subscription
</UL>

<P><STRONG><a name="[164]"></a>bsec_constructor_bsec</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, constructor_bsec.o(i.bsec_constructor_bsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_init
</UL>

<P><STRONG><a name="[140]"></a>bsec_convertHumidity</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, convertHumidity.o(i.bsec_convertHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsec_convertHumidity &rArr; bsec_log &rArr; logf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_log
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
</UL>

<P><STRONG><a name="[e7]"></a>bsec_crcCcitt2</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, crcCcitt2.o(i.bsec_crcCcitt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_crcCcitt2
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_frameSerializedData
</UL>

<P><STRONG><a name="[121]"></a>bsec_d_Entity_parseAndDeserialize</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, Entity.o(i.bsec_d_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_d_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[12e]"></a>bsec_d_Entity_serializeAndAdd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, Entity.o(i.bsec_d_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_d_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[c7]"></a>bsec_do_steps</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsec_interface.o(i.bsec_do_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
</UL>

<P><STRONG><a name="[11d]"></a>bsec_e_Entity_parseAndDeserialize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, Entity.o(i.bsec_e_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_e_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_configure
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_configure
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_setState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_setState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_setState
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[12f]"></a>bsec_e_Entity_serializeAndAdd</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, Entity.o(i.bsec_e_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_e_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_getState
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[154]"></a>bsec_f_Entity_parseAndDeserialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, Entity.o(i.bsec_f_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_f_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_configure
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[130]"></a>bsec_f_Entity_serializeAndAdd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, Entity.o(i.bsec_f_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_f_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[14d]"></a>bsec_g_Entity_parseAndDeserialize</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, Entity.o(i.bsec_g_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_g_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_setState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_setState
</UL>

<P><STRONG><a name="[14c]"></a>bsec_g_Entity_serializeAndAdd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, Entity.o(i.bsec_g_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_getState
</UL>

<P><STRONG><a name="[172]"></a>bsec_get_state</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, bsec_interface.o(i.bsec_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bsec_get_state &rArr; bsec_codegen_get_state &rArr; bsec_ChannelHub_getChannelState &rArr; bsec_SensorStatusTracker_getState &rArr; bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[150]"></a>bsec_h_Entity_parseAndDeserialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, Entity.o(i.bsec_h_Entity_parseAndDeserialize))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_setState
</UL>

<P><STRONG><a name="[14f]"></a>bsec_h_Entity_serializeAndAdd</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, Entity.o(i.bsec_h_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_h_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
</UL>

<P><STRONG><a name="[155]"></a>bsec_i_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, Entity.o(i.bsec_i_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_i_Entity_parseAndDeserialize &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[173]"></a>bsec_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsec_interface.o(i.bsec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bsec_init &rArr; bsec_codegen_init &rArr; bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[174]"></a>bsec_iot_init</STRONG> (Thumb, 302 bytes, Stack size 2688 bytes, bsec_integration.o(i.bsec_iot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3288<LI>Call Chain = bsec_iot_init &rArr; bsec_set_configuration &rArr; bsec_codegen_set_configuration &rArr; bsec_b_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_state
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_configuration
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_update_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>bsec_iot_loop</STRONG> (Thumb, 306 bytes, Stack size 2440 bytes, bsec_integration.o(i.bsec_iot_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = bsec_iot_loop &rArr; bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sensor_control
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_state
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>bsec_isequal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isequal.o(i.bsec_isequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_isequal
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[156]"></a>bsec_j_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 184 bytes, Entity.o(i.bsec_j_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bsec_j_Entity_parseAndDeserialize &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[157]"></a>bsec_k_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, Entity.o(i.bsec_k_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsec_k_Entity_parseAndDeserialize &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[11e]"></a>bsec_l_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, Entity.o(i.bsec_l_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsec_l_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[171]"></a>bsec_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, log.o(i.bsec_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_log &rArr; logf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
</UL>

<P><STRONG><a name="[132]"></a>bsec_log10</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, log10.o(i.bsec_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_log10 &rArr; log10f &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[11f]"></a>bsec_m_Entity_parseAndDeserialize</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, Entity.o(i.bsec_m_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_m_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[120]"></a>bsec_n_Entity_parseAndDeserialize</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, Entity.o(i.bsec_n_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_n_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[15b]"></a>bsec_o_Entity_parseAndDeserialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, Entity.o(i.bsec_o_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_o_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_configure
</UL>

<P><STRONG><a name="[13e]"></a>bsec_p_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, Entity.o(i.bsec_p_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_p_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_configure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_configure
</UL>

<P><STRONG><a name="[13f]"></a>bsec_polyval</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, polyval.o(i.bsec_polyval))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_polyval &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
</UL>

<P><STRONG><a name="[147]"></a>bsec_q_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, Entity.o(i.bsec_q_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_q_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
</UL>

<P><STRONG><a name="[166]"></a>bsec_rt_roundd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsec_codegen_rtwutil.o(i.bsec_rt_roundd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsec_rt_roundd &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[178]"></a>bsec_sensor_control</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, bsec_interface.o(i.bsec_sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = bsec_sensor_control &rArr; bsec_codegen_sensor_control &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[175]"></a>bsec_set_configuration</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsec_interface.o(i.bsec_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = bsec_set_configuration &rArr; bsec_codegen_set_configuration &rArr; bsec_b_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[176]"></a>bsec_set_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsec_interface.o(i.bsec_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bsec_set_state &rArr; bsec_codegen_set_state &rArr; bsec_ChannelHub_setChannelState &rArr; bsec_GasHumidityPreProcessor_setState &rArr; bsec_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[118]"></a>bsec_sin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sin.o(i.bsec_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
</UL>

<P><STRONG><a name="[119]"></a>bsec_sqrt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sqrt.o(i.bsec_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsec_sqrt &rArr; bsec_applyScalarFunctionInPlace &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_applyScalarFunctionInPlace
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
</UL>

<P><STRONG><a name="[d0]"></a>bsec_update_subscription</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsec_interface.o(i.bsec_update_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bsec_update_subscription &rArr; bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_update_subscription
</UL>

<P><STRONG><a name="[35]"></a>bus_read</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(i.bus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bus_read &rArr; IIC11_read &rArr; IIC11_MasterSend &rArr; IIC11_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[36]"></a>bus_write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(i.bus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bus_write &rArr; IIC11_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[180]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[32]"></a>config_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.config_load))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1e9]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, expf.o(i.expf), UNUSED)

<P><STRONG><a name="[129]"></a>expf</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, expf.o(i.expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_absHum
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
</UL>

<P><STRONG><a name="[93]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[17e]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[134]"></a>floorf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[12a]"></a>fmaxf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fmaxf.o(i.fmaxf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fmaxf &rArr; __ARM_fcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
</UL>

<P><STRONG><a name="[12b]"></a>fminf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fminf.o(i.fminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fminf &rArr; __ARM_fcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
</UL>

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>get_timestamp_us</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.get_timestamp_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_timestamp_us &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2d]"></a>hard_fault_handler_c</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(i.hard_fault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hard_fault_handler_c &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.emb_text)
</UL>
<P><STRONG><a name="[f]"></a>IRQ02_Handler</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, sim_i2c_slave.o(i.intp_1_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IRQ02_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[18d]"></a>intp_1_interrupt</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sim_i2c_slave.o(i.intp_1_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_intp1
</UL>

<P><STRONG><a name="[10]"></a>IRQ03_Handler</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, sim_i2c_slave.o(i.intp_2_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IRQ03_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[18f]"></a>intp_2_interrupt</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sim_i2c_slave.o(i.intp_2_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_intp2
</UL>

<P><STRONG><a name="[17a]"></a>log10f</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, log10f.o(i.log10f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = log10f &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_log10
</UL>

<P><STRONG><a name="[1ea]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, logf.o(i.logf), UNUSED)

<P><STRONG><a name="[179]"></a>logf</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, logf.o(i.logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = logf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_log
</UL>

<P><STRONG><a name="[59]"></a>main</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336 + Unknown Stack Size
<LI>Call Chain = main &rArr; bsec_iot_loop &rArr; bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSwSlaveI2C
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[38]"></a>output_ready</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, main.o(i.output_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = output_ready &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1eb]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, powf.o(i.powf), UNUSED)

<P><STRONG><a name="[e9]"></a>powf</STRONG> (Thumb, 1538 bytes, Stack size 64 bytes, powf.o(i.powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = powf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
</UL>

<P><STRONG><a name="[ea]"></a>roundf</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, roundf.o(i.roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[141]"></a>sinf</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sin
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
</UL>

<P><STRONG><a name="[34]"></a>sleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common_porting.o(i.sleep))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[152]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_applyScalarFunctionInPlace
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_sqrt
</UL>

<P><STRONG><a name="[33]"></a>state_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.state_load))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[37]"></a>state_save</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.state_save))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wdt_user.o(i.wdt_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32l051.o(RESET)
</UL>
<P><STRONG><a name="[196]"></a>wdt_interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wdt_user.o(i.wdt_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
</UL>

<P><STRONG><a name="[53]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[199]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[19a]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_IaqEstimator
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_polyval
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_absHum
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[19b]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[19d]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_IaqEstimator
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_polyval
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_absHum
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1ec]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[19e]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[19f]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1a1]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[48]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[190]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>boundary_check</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bme680.o(i.boundary_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = boundary_check
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
</UL>

<P><STRONG><a name="[181]"></a>calc_gas_resistance</STRONG> (Thumb, 204 bytes, Stack size 224 bytes, bme680.o(i.calc_gas_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[194]"></a>calc_heater_dur</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bme680.o(i.calc_heater_dur))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_heater_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
</UL>

<P><STRONG><a name="[183]"></a>calc_heater_res</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bme680.o(i.calc_heater_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = calc_heater_res &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
</UL>

<P><STRONG><a name="[184]"></a>calc_humidity</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, bme680.o(i.calc_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calc_humidity &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[185]"></a>calc_pressure</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bme680.o(i.calc_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calc_pressure &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[186]"></a>calc_temperature</STRONG> (Thumb, 160 bytes, Stack size 96 bytes, bme680.o(i.calc_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = calc_temperature &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[d7]"></a>get_calib_data</STRONG> (Thumb, 446 bytes, Stack size 64 bytes, bme680.o(i.get_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_calib_data &rArr; bme680_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
</UL>

<P><STRONG><a name="[dc]"></a>get_mem_page</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bme680.o(i.get_mem_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
</UL>

<P><STRONG><a name="[d2]"></a>null_ptr_check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bme680.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mem_page
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[d4]"></a>read_field_data</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, bme680.o(i.read_field_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = read_field_data &rArr; calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_data
</UL>

<P><STRONG><a name="[da]"></a>set_gas_config</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bme680.o(i.set_gas_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = set_gas_config &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_heater_res
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_heater_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
</UL>

<P><STRONG><a name="[d3]"></a>set_mem_page</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bme680.o(i.set_mem_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
</UL>

<P><STRONG><a name="[a9]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sci.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_MasterSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_MasterReceive
</UL>

<P><STRONG><a name="[ad]"></a>iic11_callback_master_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.iic11_callback_master_error))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[b0]"></a>iic11_callback_master_receiveend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic11_callback_master_receiveend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic11_callback_master_receiveend
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[af]"></a>iic11_callback_master_sendend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic11_callback_master_sendend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic11_callback_master_sendend
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC11_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[c6]"></a>bme680_bsec_process_data</STRONG> (Thumb, 398 bytes, Stack size 376 bytes, bsec_integration.o(i.bme680_bsec_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_do_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[c8]"></a>bme680_bsec_read_data</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, bsec_integration.o(i.bme680_bsec_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = bme680_bsec_read_data &rArr; bme680_get_sensor_data &rArr; read_field_data &rArr; calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[ca]"></a>bme680_bsec_trigger_measurement</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bsec_integration.o(i.bme680_bsec_trigger_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bme680_bsec_trigger_measurement &rArr; bme680_set_sensor_settings &rArr; bme680_set_sensor_mode &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_profile_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[cf]"></a>bme680_bsec_update_subscription</STRONG> (Thumb, 110 bytes, Stack size 168 bytes, bsec_integration.o(i.bme680_bsec_update_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = bme680_bsec_update_subscription &rArr; bsec_update_subscription &rArr; bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_update_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[169]"></a>rem_uint16_t</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsec_codegen_sensor_control.o(i.rem_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rem_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[ed]"></a>bsec_convert_to_enum_OutputIdentifier</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, Bsec.o(i.bsec_convert_to_enum_OutputIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_convert_to_enum_OutputIdentifier &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[e3]"></a>rem_uint16_t</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Bsec.o(i.rem_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rem_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkIfSensorRequired
</UL>

<P><STRONG><a name="[fa]"></a>bsec_ChannelHub_isChannelReady</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_ChannelHub_isChannelReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_ChannelHub_isChannelReady
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[fc]"></a>bsec_ChannelHub_setOutput</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ChannelHub.o(i.bsec_ChannelHub_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsec_ChannelHub_setOutput &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[f1]"></a>bsec_b_ChannelHub_ChannelHub</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_b_ChannelHub_ChannelHub))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsec_b_ChannelHub_ChannelHub &rArr; bsec_IaqEstimator_IaqEstimator &rArr; bsec_b_IaqEstimator_IaqEstimator &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_SensorStatusTracker
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_SensorHeatCompensator
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_IaqEstimator
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_resetSamplIntvls
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[ff]"></a>bsec_b_ChannelHub_setOutput</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_b_ChannelHub_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_b_ChannelHub_setOutput &rArr; roundf &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[123]"></a>bsec_GasHumidityBaselineTracker_determineAccuracyLevel</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_determineAccuracyLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_GasHumidityBaselineTracker_determineAccuracyLevel &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[127]"></a>bsec_GasHumidityBaselineTracker_filterRobustMaxMin</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_filterRobustMaxMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsec_GasHumidityBaselineTracker_filterRobustMaxMin &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[136]"></a>bsec_GasHumidityBaselineTracker_getFitParam</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_getFitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_GasHumidityBaselineTracker_getFitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
</UL>

<P><STRONG><a name="[128]"></a>bsec_GasHumidityBaselineTracker_getMinimumFilterDistance</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_getMinimumFilterDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_GasHumidityBaselineTracker_getMinimumFilterDistance &rArr; fminf &rArr; __ARM_fcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[125]"></a>bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[124]"></a>bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; bsec_absHum &rArr; expf &rArr; __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_log10
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_absHum
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getFitParam
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[11b]"></a>bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, GasHumidityBaselineTracker.o(i.bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_b_GasHumidityBaselineTracker_GasHumidityBaselineTracker &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_setState
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
</UL>

<P><STRONG><a name="[144]"></a>bsec_IaqEstimator_getGains</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, IaqEstimator.o(i.bsec_IaqEstimator_getGains))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsec_IaqEstimator_getGains &rArr; bsec_log10 &rArr; log10f &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_log10
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
</UL>

<P><STRONG><a name="[143]"></a>bsec_b_IaqEstimator_IaqEstimator</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, IaqEstimator.o(i.bsec_b_IaqEstimator_IaqEstimator))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_b_IaqEstimator_IaqEstimator &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_IaqEstimator
</UL>

<P><STRONG><a name="[146]"></a>bsec_b_SensorHeatCompensator_SensorHeatCompensator</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, SensorHeatCompensator.o(i.bsec_b_SensorHeatCompensator_SensorHeatCompensator))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_b_SensorHeatCompensator_SensorHeatCompensator
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_SensorHeatCompensator
</UL>

<P><STRONG><a name="[14e]"></a>bsec_SensorStatusTracker_resetRunInState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_resetRunInState))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
</UL>

<P><STRONG><a name="[73]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[72]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1a0]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[19c]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[8b]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[31]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[9e]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[a2]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8a]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[89]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[63]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[64]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
